
# # @app.get("/items")
# # async def items() -> list[Post]:
# #    post_objects = []
# #    for post in posts:
# #        post_objects.append(Post(id=post['id'], title=post['title'], body=post['body']))
# #     return posts
#
# @app.get("/items")
# async def items() -> list[Post]:
#     return [Post(**post) for post in posts]
#
#
# @app.post("/items/add")
# async def add_item(post: PostCreate) -> Post:
#     author = next((user for user in users if user['id'] == post.author_id), None)
#     if not author:
#         raise HTTPException(status_code=404, detail='User not found')
#
#     new_post_id = len(posts) + 1
#
#     new_post = {'id': new_post_id, 'title': post.title, 'body': post.body, 'author': author}
#     posts.append(new_post)
#
#     return Post(**new_post)
#
# @app.post("/user/add")
# async def user_add(user: Annotated[
#     UserCreate,
#     Body(..., example={
#         "name": "UserName",
#         "age": 1
#     })
# ]) -> User:
#     new_user_id = len(users) + 1
#
#     new_user = {'id': new_user_id, 'name': user.name, 'age': user.age}
#     users.append(new_user)
#
#     return User(**new_user)
#
# @app.get("/items/{id}")
# async def items(id: Annotated[int, Path(..., title='Здесь указывается id поста', ge=1, lt=100)]) -> Post:
#     for post in posts:
#         if post['id'] == id:
#             return Post(**post)
#
#     raise HTTPException(status_code=404, detail='POST not found')
#
#
# @app.get("/search")
# async def search(post_id: Annotated[
#     Optional[int],
#     Query(title="ID of post to search for", ge=1, le=50)
# ]) -> Dict[str, Optional[Post]]:
#     if post_id:
#         for post in posts:
#             if post['id'] == post_id:
#                 return {"data": Post(**post)}
#         raise HTTPException(status_code=404, detail='POST not found')
#     else:
#         return {"data": None}
